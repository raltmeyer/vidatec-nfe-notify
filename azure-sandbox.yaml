# Rogerio Altmeyer
# ADO Pipeline to build and deploy to k8s

trigger:
- sandbox

pool:
  name: 'Default'

variables:
  - group: app_vidatec_nfe_notify_sandbox
  #- group: pg_credentials
  #- group: mikrotik_main_credentials
  - name: system.debug
    value: false
  - name: pg_database
    value: 'tf_dns_vidatec_nfe' 

  - name: system.debug
    value: false
  - name: environment
    value: 'sandbox'

  - name: image_plataform
    value: 'linux/amd64'
  - name: image_version
    value: '1.0'


stages:

# - stage: Configure_DNS
#   jobs:
#   - job: Update_DNS
#     steps:
#     - script: |
#         echo "Terraform init ..."
#         terraform init --upgrade
#         echo "Terraform validate ..."
#         terraform validate
#         echo "Terraform plan ..."
#         terraform plan
#       displayName: 'Preparing Terraform'
#       workingDirectory: 'pipeline/terraform_dns'
#       env:
#         TF_LOG: DEBUG
#         PGHOST: $(PGHOST)
#         PGPASSWORD: $(PGPASSWORD)
#         PGUSER: $(PGUSER)
#         PGDATABASE: $(pg_database)
#         TF_VAR_mikrotik_host: $(mikrotik_host)
#         TF_VAR_mikrotik_password: $(mikrotik_password)
#         TF_VAR_mikrotik_username: $(mikrotik_username)
#     - script: |
#         terraform apply -auto-approve -parallelism=1
#       displayName: 'Terraform Apply'
#       workingDirectory: 'pipeline/terraform_dns'
#       condition: succeeded()
#       env:
#         #TF_LOG: DEBUG
#         PGHOST: $(PGHOST)
#         PGPASSWORD: $(PGPASSWORD)
#         PGUSER: $(PGUSER)
#         PGDATABASE: $(pg_database)
#         TF_VAR_mikrotik_host: $(mikrotik_host)
#         TF_VAR_mikrotik_password: $(mikrotik_password)
#         TF_VAR_mikrotik_username: $(mikrotik_username)


- stage: Docker_Build
  jobs:
  - job: Build_import_nfe
    steps:
    - script: |
        echo "Building Docker image..."
        docker buildx build --platform ${image_plataform} -t vidatec_nfe_notify_import:${image_version} -f ./pipeline/docker/Dockerfile .
        #docker buildx build --platform ${image_plataform} -t vidatec_nfe_notify_import -f ./pipeline/docker/Dockerfile .
      displayName: 'Build Docker Image'
      env:
        DOCKER_BUILDKIT: 1
        image_plataform: $(image_plataform)
        image_version: $(image_version)


- stage: Promote_Image
  dependsOn: Docker_Build
  jobs:
  - job: Upload_Image_to_Registry
    steps:
    - script: |
        docker tag vidatec_nfe_notify_import:${image_version} registry.altmeyer.local:5000/vidatec_nfe_notify_import:${image_version}
        docker push registry.altmeyer.local:5000/vidatec_nfe_notify_import:${image_version}
      displayName: 'Export Docker Image'
      env:
        image_plataform: $(image_plataform)
        image_version: $(image_version)
        agent_temp_directory: $(Agent.TempDirectory)
        environment: $(environment)


- stage: K8s_Deployment
  dependsOn: Promote_Image
  jobs:
  - job: K8s_Deployment
    steps:
    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'kube-sandbox.yaml'
      displayName: 'Download kubeconfg Files'
    - script: |
        echo "Apply variables to Kustomize ..."
        envsubst < overlays/${ENVIRONMENT}/kustomization.yaml.in > overlays/${ENVIRONMENT}/kustomization.yaml
        echo "Kustomize init ..."
        kustomize build overlays/$(ENVIRONMENT)
        echo "Kustomize apply ..."
        kubectl apply -k overlays/$(ENVIRONMENT)
      displayName: 'Kustomize Apply'
      workingDirectory: 'pipeline/kustomize'
      env:
        KUBECONFIG: "$(Agent.TempDirectory)/kube-sandbox.yaml"    
        image_version: $(image_version)
        MYSQL_HOST: $(MYSQL_HOST)
        MYSQL_DB: $(MYSQL_DB)
        MYSQL_USER: $(MYSQL_USER)
        MYSQL_PASS: $(MYSQL_PASS)
        MSSQL_HOST: $(MSSQL_HOST)
        MSSQL_DB: $(MSSQL_DB)
        MSSQL_USER: $(MSSQL_USER)
        MSSQL_PASS: $(MSSQL_PASS)
        SENDGRID_API_KEY: $(SENDGRID_API_KEY)
        SENDGRID_FROM_EMAIL: $(SENDGRID_FROM_EMAIL)
        ENVIRONMENT: $(environment)

- stage: CleanUp
  dependsOn: K8s_Deployment
  jobs:
  - job: CleanUp
    steps:
    - script: |
        docker system df
        echo "Cleaning up Docker system ..."
        docker system prune -f
        docker system df
      displayName: 'Clean Docker System'


